<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SDKSample.WebViewControl.Scenario5"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKSample.WebViewControl"
    xmlns:common="using:SDKSample.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock  x:Name="Description"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
                The WebView control is noticably narrow in its directly supported capabilities.  This is by design as the WebView is not meant to
                serve as platform for developing web browsing experiences.  However, there are times when it may be necessary to have a bit
                more control where you may want to access the DOM of the document loaded within the WebView.  As seen in the previous scenario
                it is possible to inject script into the document via the InvokeScript() method using "eval".
                <LineBreak/>
                <LineBreak/>
                This scenario will demonstrate how to use this technique to gain access to elements within the DOM of the loaded document.  A
                page will load below and then we will get the document.title property from the DOM and display it.
            </TextBlock>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1" Width="Auto">
            <Border BorderBrush="#FF707070" BorderThickness="1">
                <WebView x:Name="WebView5" LoadCompleted="WebView5_LoadCompleted" ScriptNotify="WebView5_ScriptNotify"/>
            </Border>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>
                <VisualState x:Name="FullScreenPortrait"/>
                <VisualState x:Name="Snapped"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</common:LayoutAwarePage>